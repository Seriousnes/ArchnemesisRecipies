@inject IJSRuntime JSRuntime

@if (Model is not null)
{
    <div class="row" @onclick="CopyRegex">
        <h2 class="mod-name" data-bs-toggle="tooltip" data-bs-placement="top" title="^@Model.Regex">
            <img src="images/archnemesis/@(Model.Image)"/><span class="ms-2">@Model.Name</span>
        </h2>            
    </div>
    @if (!string.IsNullOrEmpty(Model.Mod))
    {
        <div class="row pb-1">
            <div class="col">
                <span class="mod">@Model.Mod</span>    
            </div>
        </div>
    }
    @if (!string.IsNullOrEmpty(Model.Effect))
    {
        <div class="row pb-1">
            <div class="col">
                <span class="effects">@Model.Effect</span>    
            </div>
        </div>
    }
    @if (!string.IsNullOrEmpty(Model.Type))
    {
        <div class="row justify-content-start align-items-center">
            <div class="col-md-auto">
                <span class="rewards">Rewards:</span>
            </div>
            <div class="col">
                @foreach (var reward in Model.Rewards.GetImageUrls(group: false, imgStyle: "medium-image"))
                {
                    @((MarkupString)reward)
                }        
            </div>                
        </div>   
    }
    <div class="row">
        <div class="col-sm-12 col-lg-6">
            <div class="row justify-content-start">
                @if (Model.Components.Any())
                {
                    <ModDetailPart Items="Model.Components" Context="component">
                        <Title><span class="builds-from underline">Builds from</span></Title>
                        <ItemTemplate>
                            <ModDetailComponent Model=component OnClick=Click />
                        </ItemTemplate>
                    </ModDetailPart>                    
                }
            </div>
            <div class="row justify-content-start">
                @if (Model.ComponentOf.Any())
                {
                    <ModDetailPart Items="Model.ComponentOf" Context="component">
                        <Title><span class="builds-into underline">Builds into</span></Title>
                        <ItemTemplate>
                            <ModDetailComponent Model=component OnClick=Click />
                        </ItemTemplate>
                    </ModDetailPart>                    
                }        
            </div>
        </div>
        <div class="col-sm-12 col-lg-6">
            <div class="row justify-content-start">
            @if (Model.Maps.Any())
            {
                <ModDetailPart Items="Model.Maps" Context="map">
                    <Title><span class="rewards underline">Most common maps</span></Title>
                    <ItemTemplate>
                        <MapContainer Model="map" />
                    </ItemTemplate>
                </ModDetailPart>
            }
            </div>           
        </div>
    </div>        
}

@code {
    [Parameter]
    public ArchnemesisModViewModel Model { get; set; }

    [Parameter]
    public EventCallback<(ArchnemesisModViewModel mod, MouseEventArgs e)> OnClick { get; set; }

    private async void CopyRegex()
    {
        await JSRuntime.InvokeVoidAsync("copyClipboard", $"^{Model.Regex}");
    }

    public void SetModel(ArchnemesisModViewModel model)
    {
        this.Model = model;
    }

    async void Click(ArchnemesisModViewModel mod, MouseEventArgs e = null)
    {
        await OnClick.InvokeAsync((mod, e));
    } 
}
