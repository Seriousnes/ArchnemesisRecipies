@inject IJSRuntime JSRuntime

@if (Model is not null)
{
    <div class="col-12">
        <div class="row" @onclick="CopyRegex">
            <h2 class="mod-name" data-bs-toggle="tooltip" data-bs-placement="top" title="^@Model.Regex">
                <Image Model=Model ShowName=true></Image>
                @*<img src="images/mods/@(Model.Image)" />*@
                @Model.Name
            </h2>            
        </div>
        <div class="row"><span class="mod">@Model.Mod</span></div>
        <div class="row">
            @if (!string.IsNullOrEmpty(Model.Type))
            {
                <div class="col">
                @foreach (var reward in Model.GetImageUrls(group: false))
                {
                    @((MarkupString)reward);
                }        
                </div>    
            }
        </div>   
        <div class="row"><span class="effects">@Model.Effect</span></div>
        @foreach (var item in Model.Components)
        {
            <img src="images/mods/@(item.Image)" @onclick="(e) => Click(item, e)" data-bs-toggle="tooltip" data-bs-placement="top" title="@item.Name" />
        } 
    </div>
}

@code {
    [Parameter]
    public ArchnemesisModViewModel Model { get; set; }

    [Parameter]
    public Action<ArchnemesisModViewModel, MouseEventArgs> OnClick { get; set; }

    private async void CopyRegex()
    {
        await JSRuntime.InvokeVoidAsync("copyClipboard", $"^{Model.Regex}");
    }

    public void SetModel(ArchnemesisModViewModel model)
    {
        this.Model = model;
        StateHasChanged();
    }

    void Click(ArchnemesisModViewModel mod, MouseEventArgs e = null)
    {
        mod.Selected = true;
        OnClick(mod, e);
    } 
}
