@inject IJSRuntime JSRuntime

@if (Model is not null)
{
    <div class="col-12">
        <div class="row" @onclick="CopyRegex">
            <h2 data-bs-toggle="tooltip" data-bs-placement="top" title="^@Model.Regex">
                <img src="images/mods/@(Model.Image)" />
                @Model.Name
            </h2>            
        </div>
        <div class="row"><span class="mod">@Model.Mod</span></div>
        <div class="row">
            @if (!string.IsNullOrEmpty(Model.Type))
            {
                <div class="col">
                @foreach (var reward in Model.Type.Split(" "))
                {
                    <img src="@GetRewardImage(reward)" data-bs-toggle="tooltip" data-bs-placement="top" title="@reward" />
                }        
                </div>    
            }
        </div>   
        <div class="row"><span class="effects">@Model.Effect</span></div>
        @foreach (var item in Model.Components)
        {
            <img src="images/mods/@(item.Image)" @onclick="(e) => Click(item, e)" data-bs-toggle="tooltip" data-bs-placement="top" title="@item.Name" />
        } 
    </div>
}

@code {
    [Parameter]
    public ArchnemesisModViewModel Model { get; set; }

    [Parameter]
    public Action<ArchnemesisModViewModel, MouseEventArgs> OnClick { get; set; }

    private async void CopyRegex()
    {
        await JSRuntime.InvokeVoidAsync("copyClipboard", $"^{Model.Regex}");
    }

    public void SetModel(ArchnemesisModViewModel model)
    {
        this.Model = model;
        StateHasChanged();
    }

    void Click(ArchnemesisModViewModel mod, MouseEventArgs e = null)
    {
        mod.Selected = true;
        OnClick(mod, e);
    }    

    private string GetRewardImage(string reward)
    {
        return (_rewards.TryGetValue(reward, out var result)) ? result : "";        
    }

    private static Dictionary<string, string> _rewards = new()
        {
            { "Generic", "images/rewards/HeistRewardGeneric.png" },
            { "Gems", "images/rewards/HeistRewardGems.png" },
            { "Armour", "images/rewards/HeistRewardArmour.png" },
            { "Abyss", "images/rewards/HeistRewardAbyss.png" },
            { "Blight", "images/rewards/HeistRewardBlight.png" },
            { "Breach", "images/rewards/HeistRewardBreach.png" },
            { "Currency", "images/rewards/HeistRewardCurrency.png" },
            { "Delirium", "images/rewards/HeistRewardDelirium.png" },
            { "DivinationCards", "images/rewards/HeistRewardDivination.png" },
            { "Essences", "images/rewards/HeistRewardEssences.png" },
            { "Fossils", "images/rewards/HeistRewardFossils.png" },
            { "Fragments", "images/rewards/HeistRewardFragments.png" },
            { "Harbinger", "images/rewards/HeistRewardHarbinger.png" },
            { "Labyrinth", "images/rewards/HeistRewardLabyrinth.png" },
            { "Legion", "images/rewards/HeistRewardLegion.png" },
            { "Maps", "images/rewards/HeistRewardMaps.png" },
            { "Metamorphosis", "images/rewards/HeistRewardMetamorph.png" },
            { "Scarabs", "images/rewards/HeistRewardScarabs.png" },
            { "Trinkets", "images/rewards/HeistRewardTrinkets.png" },
            { "Uniques", "images/rewards/HeistRewardUniques.png" },
            { "Weapon", "images/rewards/HeistRewardWeapon.png" },
            { "Expedition", "images/rewards/RewardIconExpedition.png" },
            { "Heist", "images/rewards/RewardIconHeist.png" },
            { "Ritual", "images/rewards/RewardIconRitual.png" }
        };
}
