@inject IJSRuntime _jsRuntime
@inherits ComponentBase

<div id="@Model.GetElementId()" class="col mod @(Model.Fade ? "faded" : "")" align="center">    
    <div class="row">
        <div class="col">
            <img class="bordered archnemesis-icon
                @Model.GetStyle("special-background")" src="images/archnemesis/@(Model.Image)" 
                @onmouseup="(e) => OnClick.InvokeAsync((Model, e))"
                @ondblclick="(e) => OnClick.InvokeAsync((Model, e))"
                @onmouseover="(e) => OnMouseOver.InvokeAsync((Model, e))"
                @onmouseout="(e) => OnMouseOver.InvokeAsync((Model, null))"                
            />
        </div>
    </div>
    <div class="row" @onclick="Copy" ><span class="mod-name">@Model.Name</span></div>
    <div class="row justify-content-center">
        <div class="col align-middle rewards" style="display: inline-block">
        @foreach (var reward in Model.Rewards.GetImageUrls(group: true, imgStyle: "small-image"))
        {
            @((MarkupString)reward);
        }   
        @if (!string.IsNullOrEmpty(Model.Effect))
        {
            <br/>
            @Model.GetEffectIcon()
        }
        </div>
    </div>      
</div> 

@code {
    [Parameter]
    public ArchnemesisModViewModel Model { get; set; }
    [Parameter]
    public EventCallback<(ArchnemesisModViewModel mod, MouseEventArgs e)> OnClick { get; set; }
    [Parameter]
    public EventCallback<(ArchnemesisModViewModel mod, MouseEventArgs? e)> OnMouseOver { get; set; }

    private async void Copy()
    {
        await _jsRuntime.InvokeVoidAsync("copyClipboard", $"^{Model.Regex}");    
    }
}

