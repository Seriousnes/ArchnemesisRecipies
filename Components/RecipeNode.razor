<div class="row align-items-center">
    @if (Node.Components.Any())
    {
        @if (Node.IsCompleted)
        {
            <div class="d-inline-flex align-items-center @isCompleted" align="center" @onmouseup="OnClick">
                <img class="archnemesis-icon medium-image" src="images/archnemesis/@(Node.Image)" />
                <span class="@_colour small">@Node.Name</span>
            </div>
        }
        else
        {
            <div class="col-4 @_colour small no-wrap @isCompleted" align="center" @onmouseup="OnClick">                        
                <img class="archnemesis-icon" src="images/archnemesis/@(Node.Image)" /><br/>
                @Node.Name
            </div>
            <div class="col-8 @isCompleted">
                @foreach (var child in Node.Components)
                {
                    <RecipeNode @key="child" Node="child" CompletedStateChanged=CompletedStateChanged FindMod=FindMod></RecipeNode>
                }
            </div>
        }
    }
    else
    {
        <div class="col-auto @_colour no-wrap @isCompleted" @onmouseup="OnClick">
            <img class="archnemesis-icon medium-image" src="images/archnemesis/@(Node.Image)">
            @Node.Name
        </div>    
    }
</div>

@code {
    [Parameter]
    public RecipeComponentViewModel Node { get; set; }
    [Parameter]
    public EventCallback CompletedStateChanged { get; set; }
    [Parameter]
    public EventCallback<string> FindMod { get; set; }

    private async void OnClick(MouseEventArgs e)
    {
        switch (e.Button)
        {
            case 0:
                Node.IsCompleted = !Node.IsCompleted;
                await CompletedStateChanged.InvokeAsync();
                break;
            case 2:
                await FindMod.InvokeAsync(Node.Name);
                break;
        }        
    }

    private string isCompleted => Node.IsCompleted ? "completed" : "";
    private string _colour => ArchnemesisModViewModel.GetColour(Node.ModTier);
}