@using AutoMapper
@inject IJSRuntime JSRuntime
@inject IMapper _mapper
@inject ILocalStorageService _localStore

<div class="row align-items-center mx-1 mb-2">
    <div class="col-8">
        @if (!recipe.SelectedMods.Any())
        {
            <div class="row">
                <span class="rewards">Select 1 to 4 mods from the list on the left, or import a recipe</span>
            </div>
            <div class="row pt-2">
                <div class="input-group">
                    <input type="text" class="form-control" id="search-term" autocomplete="off" @bind="importString" @bind:event="oninput" placeholder="Enter an import string">
                    <button class="btn btn-secondary" type="button" @onclick="() => Import(importString)">Import</button>
                </div>
            </div>
        }
        else
        {
            <div class="row">
                <h5 class="rewards">Selected Mods:</h5>
            </div>
            <div class="row justify-content-start">
                @foreach (var mod in recipe.SelectedMods)
                {
                    <div class="col-3" align="center">                        
                        <img src="images/mods/@(mod.Image)" @onclick="() => SelectMod(mod)" data-bs-toggle="tooltip" data-bs-placement="top" title="@mod.Name" /><br/>
                        <span class="mod-name small">@mod.Name</span>
                    </div>
                }
            </div>                          
        }                       
    </div>
    <div class="col-4">
        <div class="row justify-content-end">
            <div class="col-md-auto">
            @if(recipe.SelectedMods.Any())
            {
                <button class="btn btn-secondary" type="button" @onclick="Export">Export</button>
                <button class="btn btn-secondary" type="button" @onclick="Clear">Clear</button>
            }
            </div>
        </div>
    </div>
</div> 
@if(recipe.SelectedMods.Any())
{   
    <div class="px-3 pb-2">
        <RewardsCalculator Recipe="recipe"></RewardsCalculator>
        
        @*How to build*@
        <ul class="recipe-tabs nav nav-tabs">
            <li class="nav-item" @onclick="() => _activeTab = 1">
                <span class="nav-link @getTabIsActive(1)">Build Tree</span>
            </li>
            <li class="nav-item" @onclick="() => _activeTab = 2">
                <span class="nav-link @getTabIsActive(2)">T1 Mod Count</span>
            </li>
        </ul>
    </div>         
    <div class="tree">
        <div style="@(_activeTab == 1 ? "" : "display: none;")">                
        @foreach (var c in recipe.SelectedMods)
        {
            <RecipeNode @key="c" Node="c" CompletedStateChanged=UpdateSavedRecipe></RecipeNode>
        }
        </div>

        <ul class="py-2 m-0" style="@(_activeTab == 2 ? "" : "display: none;")">                
        @foreach (var (mod, count) in recipe.GetComponents().OrderBy(x => x.Key.Name))
        {
            <li>
                @count x<img src="images/mods/@mod.Image" class="small-image pr-2" /><span class="mod-name">@mod.Name</span>
            </li>
        }
        </ul>
    </div>
}         

@code {
    [Parameter]
    public List<ArchnemesisModViewModel> Mods { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();        
    }    

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (!_hasLoadedFromLocalStore && Mods.Count > 0)
        {
            _hasLoadedFromLocalStore = true;
            // find an existing import
            if (await _localStore.ContainKeyAsync("recipe"))
            {
                var savedRecipe = await _localStore.GetItemAsStringAsync("recipe");
                Import(savedRecipe);
            }
        }
    }

    public void SelectMod(ArchnemesisModViewModel mod)
    {
        var viewModel = recipe.SelectedMods.SingleOrDefault(x => x.Name == mod.Name) ?? _mapper.Map<RecipeComponentViewModel>(mod);
        SelectMod(viewModel);
    }

    public void SelectMod(RecipeComponentViewModel mod)
    {
        if (!recipe.SelectedMods.Contains(mod))
        {
            if (recipe.SelectedMods.Count < 4)
            {
                recipe.AddMod(mod);        
            }            
        }               
        else if (recipe.SelectedMods.Contains(mod))
        {
            recipe.RemoveMod(mod);
        }
        UpdateSavedRecipe();
    }

    private int _activeTab = 1;
    private bool _hasLoadedFromLocalStore = false;
    private RecipeViewModel _recipe = new();
    private string _importString;
    private RecipeViewModel recipe
    {
        get => _recipe;
        set
        {
            _recipe = value;
            if (value is not null)
            {
                UpdateSavedRecipe();                
            }               
        }
    }
    private string importString
    {
        get => _importString;
        set 
        {
            if (TryParseImportString(value, out _))
            {
                _importString = value;       
            }
            else
            {
                _importString = string.Empty;
            }
        }
    }

    private string getTabIsActive(int tab) => tab == _activeTab ? "active" : "";

    private async void UpdateSavedRecipe()
    {
        await _localStore.SetItemAsStringAsync("recipe", _recipe.Export());        
    }   

    public async Task Clear()
    {
        recipe.SelectedMods.Clear();
        if (await _localStore.ContainKeyAsync("recipe"))
        {
            await _localStore.RemoveItemAsync("recipe");
        }
    }

    private void Import(string importString)
    {
        Import(TryParseImportString(importString, out var import) ? import : null);
        this.importString = null;
    }  

    private void Import(RecipeViewModel importedRecipe)
    {
        if (importedRecipe is not null)
        {
            importedRecipe.Map(Mods);            
            recipe = importedRecipe;
        }        
    }

    private bool TryParseImportString(string importString, out RecipeViewModel result)
    {
        result = new RecipeViewModel();        
        try
        {
            result.Import(importString);
            return true;
        }
        catch
        {
            result = null;
            return false;
        }
    }

    private async Task Export()
    {
        var exportString = recipe?.Export();
        if (!string.IsNullOrEmpty(exportString))
        {
            await JSRuntime.InvokeVoidAsync("copyClipboard", exportString);
        }
    }    
}