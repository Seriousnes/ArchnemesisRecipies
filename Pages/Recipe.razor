@using AutoMapper
@inject IJSRuntime JSRuntime
@inject IMapper _mapper
@inject ILocalStorageService _localStore

<div class="col col-lg-8">            
    <ModList Mods=_showMods OnClick=SelectMod OnMouseOver=MouseOver />
</div>
<div class="col col-lg-4" style="border-left: 1px #aa9e82 solid;">
    <div class="row">
        <h5 class="mod-name">Selected mods for recipe:</h5>
    </div>
    <div class="row align-items-center mb-2">
        <div class="col-8">
            @if (recipe.SelectedMods.Count == 0)
            {
                <div class="row">
                    <span class="rewards">Select 1 to 4 mods from the list on the left, or import a recipe</span>
                </div>
                <div class="row pt-2">
                    <div class="input-group">
                        <input type="text" class="form-control" id="search-term" autocomplete="off" @bind="importString" @bind:event="oninput" placeholder="Enter an import string">
                        <button class="btn btn-secondary" type="button" @onclick="() => Import(importString)">Import</button>
                    </div>
                </div>
            }
            else
            {
                @foreach (var mod in recipe.SelectedMods)
                {
                    <img src="images/mods/@(mod.Image)" @onclick="(e) => SelectMod(mod, e)" data-bs-toggle="tooltip" data-bs-placement="top" title="@mod.Name" />                
                }               
            }                       
        </div>
        <div class="col-4">
            <div class="row justify-content-end">
                <div class="col-md-auto">
                @if(recipe.SelectedMods.Count > 0)
                {
                    <button class="btn btn-secondary" type="button" @onclick="() => Export()">Export</button>
                    <button class="btn btn-secondary" type="button" @onclick="() => Clear()">Clear</button>
                }
                </div>
            </div>
        </div>
    </div> 
    @if(recipe.SelectedMods.Count > 0)
    {
        <div class="row">
            <h5 class="rewards">Effects of selected mods:</h5>                        
        </div>

        @foreach (var item in recipe.SelectedMods)
        {
            <div class="row"><h6 class="mod-name">@item.Name</h6></div>
            <div class="row">                
                <div class="col">
                    <Image Model=item AdditonalStyles="medium-image"></Image><span class="mod">@(!string.IsNullOrEmpty(item.Effect) ? item.Effect : "No additional effects")</span>
                    <span class="rewards">(</span>
                    @foreach (var reward in item.GetImageUrls(group: true, imgStyle: "small-image"))
                    {
                        @((MarkupString)reward);
                    }   
                    <span class="rewards">)</span>
                </div>
            </div>
        }

        <div class="row">        
            <h5 class="rewards">Total T1 mods required:</h5>            
        </div>
        @foreach (var c in recipe.Components)
        {
            <RequiredComponent Model=c OnChange=UpdateSavedRecipe />            
        }
    }             
</div>

<TooltipContainer @ref=_tooltip />


@code {
    [Parameter]
    public List<ArchnemesisModViewModel> Mods { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        _showMods = Mods.Where(x => x.ModTier > 1).ToList();

        // find an existing import
        if (await _localStore.ContainKeyAsync("recipe"))
        {
            var savedRecipe = await _localStore.GetItemAsStringAsync("recipe");
            Import(savedRecipe);
        }        

        StateHasChanged();
    }

    private List<ArchnemesisModViewModel> _selectedMods = new();
    private List<ArchnemesisModViewModel> _showMods;
    private RecipeViewModel _recipe = new();
    private TooltipContainer _tooltip;
    private string _importString;


    private RecipeViewModel recipe
    {
        get => _recipe;
        set
        {
            _recipe = value;
            if (value is not null)
            {
                UpdateSavedRecipe();                
            }               
        }
    }

    private string importString
    {
        get => _importString;
        set 
        {
            if (!TryImport(value))
            {
                _importString = value;       
            }
            else
            {
                _importString = string.Empty;
            }
        }
    }

    private async void UpdateSavedRecipe()
    {
        await _localStore.SetItemAsStringAsync("recipe", _recipe.Export(_mapper));        
    }

    private void SelectMod(ArchnemesisModViewModel mod, MouseEventArgs e)
    {
        if (!_selectedMods.Contains(mod))
        {
            if (_selectedMods.Count < 4)
            {
                _selectedMods.Add(mod);        
            }            
        }               
        else if (_selectedMods.Contains(mod))
        {
            _selectedMods.Remove(mod);
        }

        recipe = RecipeViewModel.GetRecipeViewModel(_selectedMods);
        mod.Selected = false;    
        StateHasChanged();
    }   

    private void MouseOver(ArchnemesisModViewModel mod, MouseEventArgs e)
    {
        _tooltip.SetData(mod?.MouseOver ?? false ? mod : null, e);
        mod.HighlightStyle = mod.MouseOver ? "selected" : "";
    }    

    public async void Clear()
    {
        recipe.SelectedMods.Clear();
        recipe.Components.Clear();
        if (await _localStore.ContainKeyAsync("recipe"))
        {
            await _localStore.RemoveItemAsync("recipe");
        }
    }

    private void Import(string importString)
    {
        Import(RecipeViewModel.Import(importString, _mapper));
        this.importString = null;
        StateHasChanged();
    }  

    private void Import(RecipeViewModel importedRecipe)
    {
        if (importedRecipe is not null)
        {
            // link selected mods
            importedRecipe.SelectedMods = Mods.Where(x => importedRecipe.SelectedMods.Any(r => r.Name == x.Name)).ToList();
            importedRecipe.Components.ForEach(c => c.Component = Mods.SingleOrDefault(x => x.Name == c.Component.Name));
            recipe = importedRecipe;
        }        
    }

    private bool TryImport(string importString)
    {
        var importedRecipe = RecipeViewModel.Import(importString, _mapper);
        if (importedRecipe is not null)
        {               
            Import(importedRecipe);
            StateHasChanged();
            return true;
        }
        return false;
    }

    private async void Export()
    {
        var exportString = recipe?.Export(_mapper);
        if (!string.IsNullOrEmpty(exportString))
        {
            await JSRuntime.InvokeVoidAsync("copyClipboard", exportString);
        }
    }    
}