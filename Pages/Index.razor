@page "/"
@using AutoMapper
@using System.Text.RegularExpressions
@inject HttpClient _client
@inject IMapper _mapper

<PageTitle>Archnemesis Recipe Helper</PageTitle>

<div>
    <div class="row">
        <div class="col col-lg-8">
            <div class="row">
                <div class="input-group mb-3">
                  <span class="input-group-text" id="search-label">Search</span>
                  <input type="text" class="form-control" id="search-term" aria-describedby="search-label" autocomplete="off" @bind="searchTerm" @bind:event="oninput">
                  <button class="btn btn-dark" type="button" @onclick="() => searchTerm = string.Empty">Clear</button>
                </div>
            </div>
            @foreach (var tier in Mods?.GroupBy(x => x.ModTier).OrderBy(x => x.Key))
            {
                <div class="row">
                    <div class="col" align="center">
                          <h3>Tier @tier.Key</h3>
                    </div>
                </div>
                <div class="row justify-content-center">
                @foreach (var mod in tier.OrderBy(x => x.Name))
                {
                    <ArchnemesisModTemplate Model=mod OnHighlightHandler=HighlightHandler />
                }
                </div>
            }
        </div>
        <div class="col col-lg-4" style="border-left: 1px #aa9e82 solid;">
        @foreach (var item in _selected)
        {
            <div class="row">                
                <ModDetails Model=item OnClick=HighlightHandler />
            </div>
        }   
        @if (_selected.Any())
        {
            <div class="row">
                <div class="col">
                    <button class="btn btn-dark" type="button" @onclick="(e) => { Mods.ForEach(x => x.Selected = false); HighlightHandler(null, new MouseEventArgs { Button = 0 }); }">Reset</button>
                </div>
            </div>    
        }
            
        </div>
    </div>
</div>

@code {
    public List<ArchnemesisModViewModel> Mods { get; set; } = new();
    private IList<ArchnemesisModViewModel> _selected = new List<ArchnemesisModViewModel>();
    private string _searchTerm;     

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Mods = _mapper.Map<List<ArchnemesisMod>, List<ArchnemesisModViewModel>>(await _client.GetFromJsonAsync<List<ArchnemesisMod>>("archnemesis_recipies.json"));

        Mods.ForEach(x => 
        {
            x.Components = Mods.Where(m => x.ComponentNames.Contains(m.Name)).ToList();
            x.ComponentOf = Mods.Where(m => m.ComponentNames.Contains(x.Name)).ToList();
        });
    }    

    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            _searchTerm = value;
            UpdateSearchResults();
        }
    }

    private void UpdateSearchResults()
    {
        try
        {
            var r = new Regex(searchTerm, RegexOptions.IgnoreCase);        
            Mods.ForEach(x => x.Fade = !r.IsMatch(x.Name));
        }
        catch { }        
    }

    protected void HighlightHandler(ArchnemesisModViewModel mod, MouseEventArgs e)
    {
        // remove all styles
        Mods.ForEach(x => x.HighlightStyle = string.Empty);

        if (e?.Button == 0)
        {
            _selected = new List<ArchnemesisModViewModel>();
            if (e.ShiftKey)
            {
                _selected = Mods.Where(x => x.Selected).ToList();        
            }
            else if (mod is { Selected: true })
            {
                _selected.Add(mod);
                Mods.ForEach(x => x.Selected = false);
                mod.Selected = true;
            }
        }   

        // set selected styles
        HighlightComponents(Mods.Where(x => x.Selected), 0);
        HighlightComponents(Mods.Where(x => x.MouseOver), 0);

        // parent styles
        HighlightParents(Mods.Where(x => x.Selected).SelectMany(x => x.ComponentOf), 1);
        HighlightParents(Mods.Where(x => x.MouseOver).SelectMany(x => x.ComponentOf), 1);

        StateHasChanged();
    }

    private void HighlightComponents(IEnumerable<ArchnemesisModViewModel> mods, int depth)
    {
        foreach(var mod in mods)
        {
            if (string.IsNullOrEmpty(mod.HighlightStyle))
            {
                mod.HighlightStyle = depth switch
                {
                    0 => "selected",
                    _ => $"component-{depth}"
                };    
            }

            HighlightComponents(mod.Components, depth + 1);
        }
    }

    private void HighlightParents(IEnumerable<ArchnemesisModViewModel> mods, int depth)
    {
        foreach(var mod in mods)
        {
            if (string.IsNullOrEmpty(mod.HighlightStyle))
            {
                mod.HighlightStyle = $"parent-{depth}";
            }

            HighlightParents(mod.ComponentOf, depth + 1);
        }
    }
}