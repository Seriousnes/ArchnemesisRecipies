@page "/"
@using AutoMapper
@using System.Text.RegularExpressions
@inject HttpClient _client
@inject IMapper _mapper

<PageTitle>Archnemesis Recipe Helper</PageTitle>

<div class="row mb-3 align-items-center">
    <div class="col-4">
        <div class="input-group">
            @*<span class="input-group-text" id="search-label">Search</span>*@
            <input type="text" class="form-control" id="search-term" aria-describedby="search-label" autocomplete="off" @bind="searchTerm" @bind:event="oninput" placeholder="Search for name or rewards">
            <button class="btn btn-secondary" type="button" @onclick="() => searchTerm = string.Empty">Clear</button>
        </div>
    </div>
    <div class="col-4">
        <span class="effects">Mode: </span>
        @foreach (var mode in (OperationMode[])Enum.GetValues(typeof(OperationMode)))
        {
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" name="mode" id="mode-@((int)mode)" value="@((int)mode)" checked="@(mode == OperationMode.Combination)" @onchange="OnOperationChange" />
                <label class="form-check-label effects" for="mode-@((int)mode)">@mode.GetDescription()</label>
            </div>        
        }
    </div>
</div>
<div class="row">
    @switch (_mode)
    {
        case OperationMode.Combination:
            <Combinations @ref=_combinations Mods=Mods />
            break;
        case OperationMode.RecipeBuilder:
            <Recipe @ref=_recipe Mods=Mods />
            break;
    }
</div>

@code {
    private List<ArchnemesisModViewModel> Mods { get; set; } = new();    
    private string _searchTerm;
    private OperationMode _mode = OperationMode.Combination;
    private Combinations _combinations;
    private Recipe _recipe;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Mods = _mapper.Map<List<ArchnemesisMod>, List<ArchnemesisModViewModel>>(await _client.GetFromJsonAsync<List<ArchnemesisMod>>("archnemesis_recipies.json"));

        Mods.ForEach(x => 
        {
            x.Components = Mods.Where(m => x.ComponentNames.Contains(m.Name)).ToList();
            x.ComponentOf = Mods.Where(m => m.ComponentNames.Contains(x.Name)).ToList();
        });
    }        

    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            _searchTerm = value;
            UpdateSearchResults();
        }
    }

    private void OnOperationChange(ChangeEventArgs e)
    {
        var newMode = ((OperationMode)Convert.ToInt32(e.Value));

        switch (_mode)
        {
            case OperationMode.Combination:
                _combinations.Reset();
                break;
        }

        _mode = newMode;
    }

    private void UpdateSearchResults()
    {
        try
        {
            var r = new Regex(searchTerm, RegexOptions.IgnoreCase);        
            Mods.ForEach(x => x.Fade = !r.IsMatch(x.Name) && !r.IsMatch(x.Type));
        }
        catch { }        
    }
}