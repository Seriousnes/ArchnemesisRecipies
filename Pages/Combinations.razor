<div class="col col-lg-8 scroll-panel">            
    <ModList Mods=Mods OnClick=HighlightHandler OnMouseOver=HighlightHandler />
</div>
<div class="col col-lg-4 scroll-panel" style="border-left: 1px #aa9e82 solid;">
    @if (_selected.Any())
    {
        <button class="btn btn-secondary sticky-top" type="button" @onclick="() => Reset()">Reset</button>                
    }            
    @foreach (var item in _selected)
    {
        <div class="row">                
            <ModDetails Model=item OnClick=HighlightHandler />
        </div>
    }       
</div>

<TooltipContainer @ref=_tooltip />

@code {
    [Parameter]
    public List<ArchnemesisModViewModel> Mods { get; set; } = new();
    private IList<ArchnemesisModViewModel> _selected = new List<ArchnemesisModViewModel>();
    private TooltipContainer _tooltip;

    public void Reset()
    {
        Mods.ForEach(x => x.Selected = false); 
        HighlightHandler(null, new MouseEventArgs { Button = 0 });         
    }

    protected void HighlightHandler(ArchnemesisModViewModel mod, MouseEventArgs e)
    {
        // remove all styles
        Mods.ForEach(x => x.HighlightStyle = string.Empty);

        if (e?.Button == 0)
        {
            _selected = new List<ArchnemesisModViewModel>();
            if (e.ShiftKey)
            {
                _selected = Mods.Where(x => x.Selected).ToList();        
            }
            else if (mod is { Selected: true })
            {
                _selected.Add(mod);
                Mods.ForEach(x => x.Selected = false);
                mod.Selected = true;
            }
        }

        SetTooltipData(mod);

        if (_selected.Any() && mod.MouseOver)
            mod.MouseOver = false;

        // set selected styles
        HighlightComponents(Mods.Where(x => x.Selected), 0);
        HighlightComponents(Mods.Where(x => x.MouseOver), 0);

        // parent styles
        HighlightParents(Mods.Where(x => x.Selected).SelectMany(x => x.ComponentOf), 1);
        HighlightParents(Mods.Where(x => x.MouseOver).SelectMany(x => x.ComponentOf), 1);

        StateHasChanged();
    }

    private void SetTooltipData(ArchnemesisModViewModel mod)
    {
        // don't show tooltip if the mod is selected
        ArchnemesisModViewModel tooltipData = null;
        if (mod is { MouseOver: true } && !_selected.Contains(mod))
        {
            tooltipData = mod;
        }
        _tooltip.SetModel(tooltipData);
    }

    private void HighlightComponents(IEnumerable<ArchnemesisModViewModel> mods, int depth)
    {
        foreach(var mod in mods)
        {
            if (string.IsNullOrEmpty(mod.HighlightStyle))
            {
                mod.HighlightStyle = depth switch
                {
                    0 => "selected",
                    _ => $"component-{depth}"
                };    
            }

            HighlightComponents(mod.Components, depth + 1);
        }
    }

    private void HighlightParents(IEnumerable<ArchnemesisModViewModel> mods, int depth)
    {
        foreach(var mod in mods)
        {
            if (string.IsNullOrEmpty(mod.HighlightStyle))
            {
                mod.HighlightStyle = $"parent-{depth}";
            }

            HighlightParents(mod.ComponentOf, depth + 1);
        }
    }
}